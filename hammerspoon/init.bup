-- ----------------------------------------------------------------------------
-- Initial Setup
-- ----------------------------------------------------------------------------
hs.window.animationDuration = 0
local vw = hs.inspect.inspect
local configFileWatcher = nil
local appWatcher = nil
local frameCache = {}
local grid = require "hs.grid"

hs.hints.showTitleThresh = 99

-- ----------------------------------------------------------------------------
-- Keyboard modifiers
-- ----------------------------------------------------------------------------
local modNone  = {}
local mAlt     = {"⌥"}
local modCmd   = {"⌘"}
local modShift = {"⇧"}
local modHyper = {"⌥", "⌃"}

-- ----------------------------------------------------------------------------
-- Modules
-- ----------------------------------------------------------------------------

-- Automatically reload config
function reloadConfig()
    configFileWatcher:stop()
    configFileWatcher = nil
    appWatcher:stop()
    appWatcher = nil
    hs.reload()
end

configFileWatcher = hs.pathwatcher.new(os.getenv("HOME") .. "/.hammerspoon/",
				       reloadConfig)
configFileWatcher:start()

-- Callback function for application events
function applicationWatcher(appName, eventType, appObject)
    if (eventType == hs.application.watcher.activated) then
        if (appName == "Finder") then
            -- Bring all Finder windows forward when one gets activated
            appObject:selectMenuItem({"Window", "Bring All to Front"})
        end
    end
end

appWatcher = hs.application.watcher.new(applicationWatcher)
appWatcher:start()

-- Modal activation / deactivation
local modalKeys = {}
local modalActive = false

function modalBind( mods, key, callback )
    table.insert( modalKeys, hs.hotkey.new( mods, key, callback ) )
end

function disableModal()
    modalActive = false
    for keyCount = 1, #modalKeys do
        modalKeys[ keyCount ]:disable()
    end
    hs.alert.closeAll()
    hs.hints.closeHints()
end

function enableModal()
    modalActive = true
    for keyCount = 1, #modalKeys do
        modalKeys[ keyCount ]:enable()
    end
    hs.alert.show( "Window manager active", 999999 )
end

hs.hotkey.bind( modHyper, 'space', function()
    if( modalActive ) then
        disableModal()
    else
        enableModal()
    end
end )
modalBind( modNone, 'escape', function() disableModal() end )
modalBind( modNone, 'return', function() disableModal() end )

-- Cycle args for the function when called repeatedly:
-- cycleCalls( fn, { {args1...}, ... } )
function cycleCalls( fn, args )
    local argIndex = 0
    return function()
        argIndex = argIndex + 1
        if (argIndex > #args) then
            argIndex = 1;
        end
        fn( args[ argIndex ] );
    end
end

-- This method can be used to place a window to a position and size on the screen
-- by using four floats instead of pixel sizes. Returns the window instance.
-- Examples:
--  windowToGrid( someWindow, 0, 0, 0.25, 0.5 );     -- top-left, width: 25%, height: 50%
--  windowToGrid( someWindow, 0.3, 0.2, 0.5, 0.35 ); -- top: 30%, left: 20%, width: 50%, height: 35%
function windowToGrid( window, rect )
    -- TODO: change rect to use named indices rather than integer
    if not window then
        return window
    end

    local screen = hs.screen.mainScreen():fullFrame()
    window:setFrame( {
        x = math.floor( rect[1] * screen.w + .5 ) + screen.x,
        y = math.floor( rect[2] * screen.h + .5 ) + screen.y,
        w = math.floor( rect[3] * screen.w + .5 ),
        h = math.floor( rect[4] * screen.h + .5 )
    } )
    return window
end

function toGrid( x, y, w, h )
    windowToGrid( hs.window.focusedWindow(), x, y, w, h );
end

-- Toggle between full screen
function toggle_window_maximized()
    local win = hs.window.focusedWindow()
    if frameCache[win:id()] then
        win:setFrame(frameCache[win:id()])
        frameCache[win:id()] = nil
    else
        frameCache[win:id()] = win:frame()
        win:maximize()
    end
end

-- Notification for changes
hs.notify.new( {title='Hammerspoon', subTitle='Configuration loaded'} ):send()

-- Hinting Available characters
hs.hints.hintChars = {"A","B","D","E","F","G","I","N","P","Q",
                      "R","S","T","U","V","W","X","Y","Z"}

-- ----------------------------------------------------------------------------
-- Modal keys
-- ----------------------------------------------------------------------------
-- Center window
modalBind( modNone, 'C', cycleCalls( toGrid, {
    {0.22, 0.025, 0.56, 1},
    {0.1, 0, 0.8, 1}
} ) )

-- Move Window Directionally (Grid)
modalBind( modNone, 'H',  cycleCalls( toGrid, {
    {0, 0, 0.5, 1},
    {0, 0, 0.6, 1}
} ))

modalBind( modNone, 'J', cycleCalls( toGrid, {
    {0, 0.5, 1, 0.5},
    {0.5, 0.5, 1, 0.5}
} ));

modalBind( modNone, 'K', cycleCalls( toGrid, {
    {0, 0, 1, 0.5},
    {0.5, 0, 1, 0.5}
} ))

modalBind( modNone, 'L', cycleCalls( toGrid, {
    {0.5, 0, 0.5, 1},
    {0.4, 0, 0.6, 1}
} ))

-- Push Window Next/Prev Screen
modalBind( modNone, 'N', grid.pushWindowNextScreen)

-- Toggle Full Screen
modalBind( modNone, 'M',  toggle_window_maximized )

-- App Switcher (Hints)
hs.hotkey.bind(modHyper, 'O', hs.hints.windowHints)


-- ----------------------------------------------------------------------------
-- Non-Modal Keys
-- ----------------------------------------------------------------------------
-- Window Focus Directional Switch
hs.hotkey.bind(modHyper, 'k', function()
    if hs.window.focusedWindow() then
        hs.window.focusedWindow():focusWindowNorth()
    else
        hs.alert.show("No active window")
    end
 end)

hs.hotkey.bind(modHyper, 'j', function()
    if hs.window.focusedWindow() then
        hs.window.focusedWindow():focusWindowSouth()
    else
        hs.alert.show("No active window")
    end
 end)

hs.hotkey.bind(modHyper, 'l', function()
    if hs.window.focusedWindow() then
        hs.window.focusedWindow():focusWindowEast()
    else
        hs.alert.show("No active window")
    end
end)

hs.hotkey.bind(modHyper, 'h', function()
    if hs.window.focusedWindow() then
        hs.window.focusedWindow():focusWindowWest()
    else
        hs.alert.show("No active window")
    end
end)

-- App Switcher (Hints)
modalBind( modNone, 'O', hs.hints.windowHints )
